<?php declare(strict_types=1);

namespace App\Command;

use App\Entity\Category;
use App\Entity\ConditionProduct;
use App\Entity\Product;
use App\Entity\MediaUrl;
use App\Entity\Manufacter;
use App\Repository\ProductRepository;
use App\Services\Factory\ProductFactory;
use App\Services\Normalizer\Product\ProductNormaliserFromPrestaShop;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

#[AsCommand(
    name: 'app:create-product-from-prestashop-Product_csv',
    description: 'load csv from file',
)]
class PrestashopCSVToProduct extends Command
{
    private EntityManagerInterface $entityManager;
    private string $fileDirectory;

    private SymfonyStyle $io;

    private ProductRepository $productRepository;

    public function __construct(
        EntityManagerInterface $entityManager,
        string                 $fileDirectory,
        ProductRepository      $productRepository
    )
    {
        parent::__construct();
        $this->fileDirectory = $fileDirectory;
        $this->entityManager = $entityManager;
        $this->productRepository = $productRepository;
    }

    protected function configure(): void
    {

        $this->setDescription('load csv from file');
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
//        parent::initialize($input, $output); // TODO: Change the autogenerated stub
        $this->io = new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {

        $this->CreateProduct();

        return Command::SUCCESS;
    }

    private function getDataFromFile(): array
    {
        $file = $this->fileDirectory . 'files-products-csv-prestashop-presta-product-2570-fr.csv';

        $fileExtention = pathinfo($file, PATHINFO_EXTENSION);

        $normalizers = [new ObjectNormalizer()];

        $encoders = [
            new CsvEncoder()
        ];

        $serializer = new Serializer($normalizers, $encoders);

        /** @var  string $fileString */
        $fileString = file_get_contents($file);

        $data = $serializer->decode($fileString, $fileExtention, [CsvEncoder::DELIMITER_KEY => ';']);
        return $data;
    }


    private function CreateProduct()
    {

        $this->io->section('Creation des Product a partir du fichier');

        $productCreated = 0;
        foreach ($this->getDataFromFile() as $row) {

//            "﻿ID" = " ID"  in prestashop csv IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            if (array_key_exists("﻿ID", $row)) {
                $product = $this->productRepository->findOneBy([
                    'ext_id' => $row["﻿ID"]
                ]);

                //if product exist do not make duplication
                if (!$product) {
                    try {

                        //Replace string categories in Row Categories/Entities
                        $arrayStrCategory = explode(",", $row['CATEGORIES']);
                        $arrayCategory = $this->entityManager->getRepository(Category::class)->getArrayIdByArrayCode($arrayStrCategory);
                        $newArrayCategories = [];
                        foreach ($arrayCategory as $category) {
                            $newArrayCategories[] = $category;
                        }
                        $row['CATEGORIES'] = $newArrayCategories;

                        //IS_MAIN for firstProductVariant
                        $row['IS_MAIN'] = true;

                        //MediaUrl Create Entity From String  list of urls
                        $newArrayUrls = [];
                        $imgs = explode(",", $row['IMAGES_URL']);

                        $is_main = true;
                        foreach ($imgs as $img) {
                            if ($img != "") {
                                $fileExtention = pathinfo($img, PATHINFO_EXTENSION);

                                $newImage = new MediaUrl();
                                $newImage->setMimeType("image/" . $fileExtention);
                                $newImage->setName("no definition");
                                $newImage->setUrlLink($img);
                                $newImage->setCreatedAt(new \DateTimeImmutable('now'));
                                $newImage->setUpdatedAt(new \DateTimeImmutable('now'));
                                $newImage->setIsMain($is_main);

                                if ($is_main) {
                                    $is_main = false;
                                }
                                $newArrayUrls[] = $newImage;
                                $this->entityManager->persist($newImage);
                            }

                        }
                        $row['IMAGES_URL'] = $newArrayUrls;

                        // get Manufacter if not exist create new with id give by csv and create random string for name
                        $manufacter = $this->entityManager->getRepository(Manufacter::class)->findOneBy([
                            'ext_id' => intval($row['MANUFACTER'])
                        ]);
                        if (!$manufacter) {
                            $manufacter = new Manufacter();
                            $manufacter->setExtId(intval($row['MANUFACTER']));
                            $manufacter->setName($this->generateRandomString(10));
                            $this->entityManager->persist($manufacter);
                        }
                        $row['MANUFACTER'] = $manufacter;



                        //add condition to row
                        $Condition = $this->entityManager->getRepository(ConditionProduct::class)->findOneBy(['current_condition' => $row['CONDITION']]);
                        if(!$Condition)
                        {
                            $Condition = (new ConditionProduct())
                                ->setCurrentCondition($row['CONDITION']);

                            $this->entityManager->persist($Condition);
                        }
                        $row['CONDITION']=$Condition;

                        //Create product First Product Variation from prestashop
                        $product = (new ProductFactory($this->entityManager))->buildProduct(new ProductNormaliserFromPrestaShop($row));
                        $this->entityManager->persist($product);


                        $this->entityManager->persist($product);

                        $this->entityManager->flush();
                        $productCreated++;
                    }
                    catch (\Exception $e) {
                        $this->io->section($e->getMessage());
                    }
                }
            }
        }

        $this->io->success('success '.$productCreated.' product create');
    }

    private function generateRandomString(int $length = 10): string
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[random_int(0, $charactersLength - 1)];
        }
        return $randomString;
    }

}
