<?php declare(strict_types=1);

namespace App\Command;

use App\Entity\Category;
use App\Entity\ConditionProduct;
use App\Entity\Product;
use App\Entity\MediaUrl;
use App\Entity\Manufacter;
use App\Repository\ProductRepository;
use App\Services\Factory\MediaUrlFactory;
use App\Services\Factory\ProductFactory;
use App\Services\Factory\ProductVariationFactory;
use App\Services\Infrastructure\MediaUrlDownloadService;
use App\Services\Normalizer\Product\ProductNormaliserFromPrestaShop;
use App\Services\Normalizer\Product\ProductVariationNormaliserFromPrestaShop;
use App\Services\Normalizer\Product\ProductVariationNormaliserFromProductPrestaShop;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Psr\Log\LoggerInterface;
#[AsCommand(
    name: 'app:create-product-from-prestashop-Product_csv',
    description: 'load csv from file',
)]
class PrestashopCSVToProduct extends Command
{
    private EntityManagerInterface $entityManager;
    private string $fileDirectory;

    private SymfonyStyle $io;

    private ProductRepository $productRepository;
    private MediaUrlDownloadService $mediaUrlDownloadService;

    private ParameterBagInterface $parameterBag;
    private LoggerInterface  $logger;

    public function __construct(
        EntityManagerInterface $entityManager,
        string                 $fileDirectory,
        ProductRepository      $productRepository,
        ParameterBagInterface $parameterBag,
        MediaUrlDownloadService $mediaUrlDownloadService,
        LoggerInterface $logger
    )
    {
        parent::__construct();
        $this->fileDirectory = $fileDirectory;
        $this->entityManager = $entityManager;
        $this->productRepository = $productRepository;
        $this->mediaUrlDownloadService = $mediaUrlDownloadService;
        $this->parameterBag = $parameterBag;
        $this->logger = $logger;
    }

    protected function configure(): void
    {
        $this->addArgument('path', null, 'path :');
        $this->setDescription('load csv from file');
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
//        parent::initialize($input, $output); // TODO: Change the autogenerated stub
        $this->io = new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        try {
            $this->CreateProduct($output,$input->getArgument('path'));

            return Command::SUCCESS;
        }
        catch (\Exception $e)
        {
            return Command::FAILURE;
        }

    }

    private function getDataFromFile(string $path = null): array
    {
        if($path === null)
        {
        $file = $this->parameterBag->get('download_directory') . '/FileTest/files-products-csv-prestashop-presta-product-2570-fr.csv';

        }
        else{
            $file =$path;
        }

        $fileExtention = pathinfo($file, PATHINFO_EXTENSION);

        $normalizers = [new ObjectNormalizer()];

        $encoders = [
            new CsvEncoder()
        ];

        $serializer = new Serializer($normalizers, $encoders);

        /** @var  string $fileString */
        $fileString = file_get_contents($file);


        $data = $serializer->decode($fileString, $fileExtention, [CsvEncoder::DELIMITER_KEY => ';']);
        return $data;
    }


    private function CreateProduct(OutputInterface $output,string $path = null)
    {




        $qConditions = $this->entityManager->getRepository(ConditionProduct::class)->findAll();
        $Conditions = array_map(function(ConditionProduct $condition){
            return $condition->getCurrentCondition();
        },$qConditions);


        $manufacters = $this->entityManager->getRepository(Manufacter::class)->findAll();
        $manufacters = array_map(function(Manufacter $manufacter){
            return $manufacter->getExtId();
        },$manufacters);


        $productCreated = 0;
        foreach ($this->getDataFromFile($path) as $row) {

//            "﻿ID" = " ID"  in prestashop csv IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! be carefull with encodage of csv need to be [UTF-8] use notepad ++ o other to reEncode

            if (array_key_exists("ID", $row)) {
                $product = $this->productRepository->findOneBy([
                    'ext_id' => $row["ID"]
                ]);

                //if product exist do not make duplication
                if (!$product) {
                    try {

                        //Replace string categories in Row Categories/Entities
                        $arrayCategory = $this->entityManager->getRepository(Category::class)->getCategoriesByCodes($row['CATEGORIES']);

                        $row['CATEGORIES'] = $arrayCategory;


                        // get Manufacter if not exist create new with id give by csv and create random string for name
                        if (!in_array($row['MANUFACTER'],$manufacters,true)) {
                            $manufacter = new Manufacter();
                            $manufacter->setExtId(intval($row['MANUFACTER']));
                            $manufacter->setName($this->generateRandomString(10));
                            $this->entityManager->persist($manufacter);
                        }
                        $row['MANUFACTER'] = $manufacter;


                        //Check if Condition exist if not create new one
                        if(!in_array($row['CONDITION'],$Conditions,true))
                        {
                            $Condition = (new ConditionProduct())
                                ->setCurrentCondition($row['CONDITION']);
                            $this->entityManager->persist($Condition);
                            $Conditions[] = $row['CONDITION'];
                        }
                        else{
                            $Condition =  $this->entityManager->getRepository(ConditionProduct::class)->findby(['current_condition'=>$row['CONDITION']])[0];
                        }
                        $row['CONDITION']=$Condition;



                        //MediaUrl Create Entity From String  list of urls
                        $imgs = explode(",", $row['IMAGES_URL']);
                        $mediaUrls = $this->mediaUrlDownloadService->downloadImagesAndSaveMediaUrl($imgs,true);

                        $row['IMAGES_URL']=$mediaUrls;
                        if(empty($row['IMAGES_URL']))
                        {
                            $mediaUrl = (new MediaUrlFactory())->buildMediaUrl('default','default.png',true);
                            $this->entityManager->persist( $mediaUrl);
                            $row['IMAGES_URL'] = [$mediaUrl];
                        }
                        //CreateMainVariation
                        $row['IS_MAIN'] = true;
                        $productVariation = (new ProductVariationFactory())->buildProduct(new ProductVariationNormaliserFromProductPrestaShop($row));
                        $row['PRODUCT_VARIATION'] = $productVariation;

                        $product = (new ProductFactory())->buildProduct(new ProductNormaliserFromPrestaShop($row));

                        $this->entityManager->persist($productVariation);
                        $this->entityManager->persist($product);
                        $this->entityManager->flush();
                        $productCreated++;
                    }
                    catch (\Exception $e) {

                        $this->logger->error($e->getMessage());
                    }
                }

            }
            else
            {
                $this->logger->error("je n ai pas trouvé ID");
            }

        }

        $this->io->write('produits créés =>' .$productCreated);

    }

    private function generateRandomString(int $length = 10): string
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[random_int(0, $charactersLength - 1)];
        }
        return $randomString;
    }

}
