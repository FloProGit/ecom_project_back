<?php declare(strict_types=1);

namespace App\Command;

use App\Entity\MediaUrl;
use App\Entity\Product;
use App\Entity\Attribute;
use App\Entity\ProductVariation;
use App\Repository\ProductVariationRepository;
use App\Services\Factory\ProductVariationFactory;
use App\Services\Normalizer\Product\ProductVariationNormaliserFromPrestaShop;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

#[AsCommand(
    name: 'app:create-product-variation-from-prestashop_csv',
    description: 'load csv from file',
)]
class PrestashopCSVToProductVariation extends Command
{
    private EntityManagerInterface $entityManager;
    private string $fileDirectory;

    private SymfonyStyle $io;

    private ProductVariationRepository $productVariationRepository;

    public function __construct(
        EntityManagerInterface     $entityManager,
        string                     $fileDirectory,
        ProductVariationRepository $productVariationRepository
    )
    {
        parent::__construct();
        $this->fileDirectory = $fileDirectory;
        $this->entityManager = $entityManager;
        $this->productVariationRepository = $productVariationRepository;
    }

    protected function configure(): void
    {

        $this->setDescription('load csv from file');
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
//        parent::initialize($input, $output); // TODO: Change the autogenerated stub
        $this->io = new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {

        $this->CreateProduct();

        return Command::SUCCESS;
    }

    private function getDataFromFile(): array
    {
        $file = $this->fileDirectory . 'files-combinations-csv-prestashop-presta-combination-2570-fr.csv';

        $fileExtention = pathinfo($file, PATHINFO_EXTENSION);

        $normalizers = [new ObjectNormalizer()];

        $encoders = [
            new CsvEncoder()
        ];

        $serializer = new Serializer($normalizers, $encoders);

        /** @var  string $fileString */
        $fileString = file_get_contents($file);

        $data = $serializer->decode($fileString, $fileExtention, [CsvEncoder::DELIMITER_KEY => ';']);

        return $data;
    }


    private function CreateProduct()
    {

        $this->io->section('Creation des Product a partir du fichier');

        $productVariationCreated = 0;
        foreach ($this->getDataFromFile() as $row) {
//            "﻿PRODUCT_ID" => " PRODUCT_ID" IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            if (array_key_exists("REFERENCE", $row)) {
                $productVariationExist = $this->productVariationRepository->findOneBy([
                    'ext_reference' => $row["REFERENCE"]
                ]);
                if (!$productVariationExist) {
                    try {
                        $productVariation = new ProductVariation();
                        $product = $this->entityManager->getRepository(Product::class)->findOneBy([
                            'ext_id' => intval($row['﻿PRODUCT_ID'])
                        ]);
                        $mainProductVariation = $this->entityManager->getRepository(ProductVariation::class)->findOneBy([
                            'ext_id' => intval($row['﻿PRODUCT_ID']),
                            'is_main' => true
                        ]);
                        if ($product) {

                            //MediaUrl Create Entity From String  list of urls
                            $newArrayUrls = [];
                            $imgs = explode(",", $row['IMAGE_URL']);

                            $is_main = true;
                            foreach ($imgs as $img) {
                                if ($img != "") {
                                    $fileExtention = pathinfo($img, PATHINFO_EXTENSION);

                                    $newImage = new MediaUrl();
                                    $newImage->setMimeType("image/" . $fileExtention);
                                    $newImage->setName("no definition");
                                    $newImage->setUrlLink($img);
                                    $newImage->setCreatedAt(new \DateTimeImmutable('now'));
                                    $newImage->setUpdatedAt(new \DateTimeImmutable('now'));
                                    $newImage->setIsMain($is_main);

                                    if ($is_main) {
                                        $is_main = false;
                                    }
                                    $newArrayUrls[] = $newImage;
                                    $this->entityManager->persist($newImage);
                                }

                            }
                            $row['IMAGE_URL'] = $newArrayUrls;

                            $attribute = new Attribute();
                            $attribute->setName($row['ATTRIBUTE']);
                            $attribute->setValue($row['VALUE']);
                            $attribute->setCreatedAt(new \DateTimeImmutable('now'));
                            $attribute->setUpdatedAt(new \DateTimeImmutable('now'));
                            $this->entityManager->persist($attribute);

                            $row['ATTRIBUTE'] = $attribute;

                            $row['NAME'] = $mainProductVariation->getName();
                            $row['PRICE_TAX_EXCLUDE'] = $mainProductVariation->getPriceTaxExclude();
                            $row['CONDITION'] = $mainProductVariation->getConditionProductId();
                            $row['MANUFACTER'] = $mainProductVariation->getManufacterId();
                            $row['IS_MAIN'] = false;
                            $row['PRODUCT'] = $product;


                            $productVariation = (new ProductVariationFactory($this->entityManager))->buildProduct(new ProductVariationNormaliserFromPrestaShop($row));

                            $this->entityManager->persist($product);
//
                            $this->entityManager->persist($productVariation);


                            $this->entityManager->persist($product);

                            $this->entityManager->flush();
                            $productVariationCreated++;
                        }

                    } catch (\Exception $e) {
                        $this->io->section($e->getMessage());
                    }
                }
            }
        }

        $this->io->success('success '.$productVariationCreated.' product variation has been created');
    }

}
