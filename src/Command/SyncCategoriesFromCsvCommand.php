<?php

namespace App\Command;

use App\Entity\Category;
use App\Repository\CategoryRepository;
use DateTimeImmutable;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

#[AsCommand(
    name: 'app:create-category-from-csv',
    description: 'load csv from file',
)]
class SyncCategoriesFromCsvCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private string $fileDirectory;

    private SymfonyStyle $io;

    private CategoryRepository $categoryRepository;

    public function __construct(
        EntityManagerInterface $entityManager,
        string                 $fileDirectory,
        CategoryRepository     $productRepository
    )
    {
        parent::__construct();
        $this->fileDirectory = $fileDirectory;
        $this->entityManager = $entityManager;
        $this->categoryRepository = $productRepository;
    }

    protected function configure(): void
    {

        $this->setDescription('load csv from file');
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
//        parent::initialize($input, $output); // TODO: Change the autogenerated stub
        $this->io = new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {

        $this->createCategory();

        return Command::SUCCESS;
    }

    private function getDataFromFile(): array
    {
        $file = $this->fileDirectory . 'files-categories-csv-prestashop-category-2570-fr.csv';

        $fileExtention = pathinfo($file, PATHINFO_EXTENSION);

        $normalizers = [new ObjectNormalizer()];

        $encoders = [
            new CsvEncoder()
        ];

        $serializer = new Serializer($normalizers, $encoders);

        /** @var  string $fileString */
        $fileString = file_get_contents($file);

        $data = $serializer->decode($fileString, $fileExtention, [CsvEncoder::DELIMITER_KEY => ';']);

        return $data;
    }

    private function setParentID()
    {
        $allCategory = $this->categoryRepository->findAll();
        foreach ($allCategory as $category) {

            $result = $this->categoryRepository->findOneBy(['name' => $category->getParent()]);

            if($result !== null)
            {
                $category->setIdParent($result->getId());
                $this->entityManager->persist($category);
                $this->entityManager->flush();
            }
        }
    }

    private function createCategory()
    {

        $this->io->section('Creation des Product a partir du fichier');

        $categoryCreated = 0;
        foreach ($this->getDataFromFile() as $row) {
            if (array_key_exists('C', $row)) {
                $product = $this->categoryRepository->findOneBy([
                    'code' => $row['C']
                ]);
                if (!$product) {
                    try {


                        $category = new Category();


                        $category->setCode($row['C']);
                        $category->setIsActive($row['ACTIVE']);
                        $category->setIdParent(-1);
                        $category->setName($row['NAME']);
                        $category->setParent($row['PARENT_CATEGORY']);
                        $category->setRootCategory($row['ROOT_CATEGORY']);
                        $category->setDescription($row['DESCRIPTION']);
                        $category->setMetaTitle($row['META_TITLE']);
                        $category->setMetaKeyword($row['META_KEYWORDS']);
                        $category->setMetaDescription($row['META_DESCRIPTION']);
                        $category->setUrlRewritten($row['URL_REWRITTEN']);
                        $category->setImageUrl($row['IMAGE_URL']);
                        $category->setCreatedAt(date_create_immutable());


                        $this->entityManager->persist($category);

                        $categoryCreated++;
                    } catch (\Exception $e) {
                        $this->io->section($e);
                    }
                }
            }
        }
        try {
            $this->entityManager->flush();
        } catch (\Exception $e) {
            $this->io->section($e);
        }

        $this->setParentID();

//        $this->getDataFromFile();
        if ($categoryCreated != 0) {
            $string = "{$categoryCreated} Category Créé en Base de Donnée";
        } else {
            $string = "Aucune  Category créé en Base de Donnée";
        }
        $this->io->success($string);
    }
}
