<?php

namespace App\Command;

use App\Entity\Categories;
use App\Repository\CategoriesRepository;
use DateTimeImmutable;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
#[AsCommand(
    name: 'app:create-category-from-csv',
    description: 'load csv from file',
)]
class SyncCategoriesFromCsvCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private string $fileDirectory;

    private SymfonyStyle $io;

    private CategoriesRepository $productRepository;

    public function __construct(
        EntityManagerInterface $entityManager,
        string $fileDirectory,
        CategoriesRepository $productRepository
    )
    {
        parent::__construct();
       $this->fileDirectory = $fileDirectory;
       $this->entityManager = $entityManager;
       $this->productRepository = $productRepository;
    }

    protected function configure(): void
    {

        $this->setDescription('load csv from file');
//            ->addArgument('arg1', InputArgument::OPTIONAL, 'Argument description')
//            ->addOption('option1', null, InputOption::VALUE_NONE, 'Option description')
        ;
    }

    protected function initialize(InputInterface $input, OutputInterface $output) : void
    {
//        parent::initialize($input, $output); // TODO: Change the autogenerated stub
        $this->io =  new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {

       $this->createCategory();

        return Command::SUCCESS;
    }

    private function getDataFromFile():array
    {
        $file = $this->fileDirectory.'files-categories-csv-prestashop-category-2570-fr.csv';

        $fileExtention = pathinfo($file,PATHINFO_EXTENSION);

        $normalizers = [new ObjectNormalizer()];

        $encoders = [
            new CsvEncoder()
        ];

        $serializer = new Serializer($normalizers, $encoders);

        /** @var  string  $fileString */
        $fileString = file_get_contents($file);

        $data = $serializer->decode($fileString,$fileExtention,[CsvEncoder::DELIMITER_KEY => ';']);

        return $data;
    }
    private function createCategory()
    {
        $this->io->section('Creation des Product a partir du fichier');

        $categoryCreated = 0;
        foreach ($this->getDataFromFile() as $row)
        {

            if(array_key_exists('C',$row))
            {

                $product = $this->productRepository->findOneBy([
                    'code' => $row['C']
                ]);
                if(!$product)
                {
                    try {


                    $category = new Categories();


                        $category->setCode($row['C']);
                        $category->setActive($row['ACTIVE']);
                        $category->setName($row['NAME']);
                        $category->setParentCategory($row['PARENT_CATEGORY']);
                        $category->setRootCategory($row['ROOT_CATEGORY']);
                        $category->setDescription($row['DESCRIPTION']);
                        $category->setMetaTitle($row['META_TITLE']);
                        $category->setMetaKeywords($row['META_KEYWORDS']);
                        $category->setMetaDescription($row['META_DESCRIPTION']);
                        $category->setUrlRewritten($row['URL_REWRITTEN']);
                        $category->setImageUrl($row['IMAGE_URL']);
                        $category->setCreatedAt(date_create_immutable());
                        $category->setUpdatedAt(date_create_immutable());


                    $this->entityManager->persist($category);

                        $categoryCreated++;
                    }  catch(\Exception $e){
                        $this->io->section($e);
                    }
                }
            }
        }
        try{
            $this->entityManager->flush();

        }
        catch(\Exception $e){
            $this->io->section($e);
        }
//        $this->getDataFromFile();
        if($categoryCreated != 0)
        {
            $string = "{$categoryCreated} Category Créé en Base de Donnée";
        }
        else
        {
            $string = "Aucune  Category créé en Base de Donnée";
        }
        $this->io->success($string);
    }
}
